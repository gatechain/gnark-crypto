{{ $G1TAffine := print (toUpper .G1.PointName) "Affine" }}
{{ $G1TJacobian := print (toUpper .G1.PointName) "Jac" }}
{{ $G1TJacobianExtended := print (toLower .G1.PointName) "JacExtended" }}

{{ $G2TAffine := print (toUpper .G2.PointName) "Affine" }}
{{ $G2TJacobian := print (toUpper .G2.PointName) "Jac" }}
{{ $G2TJacobianExtended := print (toLower .G2.PointName) "JacExtended" }}


import (
	"bytes"
	"math/big"
	"github.com/consensys/gnark-crypto/ecc/{{.Name}}/fp"
	"github.com/consensys/gnark-crypto/ecc/{{.Name}}/fr"
	"github.com/consensys/gnark-crypto/ecc/{{.Name}}/fr/mimc"
)

const (
	fuzzInteresting = 1
	fuzzNormal      = 0
	fuzzDiscard     = -1
)

func Fuzz(data []byte) int {
	// TODO separate in multiple FuzzXXX and update continuous fuzzer scripts
	// else, we don't really benefits for fuzzer strategy.
	fr.Fuzz(data)
	fp.Fuzz(data)
	mimc.Fuzz(data)

	// fuzz pairing 
	r := bytes.NewReader(data)
	var e1, e2 fr.Element 
	e1.SetRawBytes(r)
	e2.SetRawBytes(r)

	{
		var r, r1, r2, r1r2, zero GT
		var b1, b2, b1b2 big.Int
		e1.ToBigIntRegular(&b1)
		e2.ToBigIntRegular(&b2)
		b1b2.Mul(&b1, &b2)

		var p1 {{$G1TAffine}}
		var p2 {{$G2TAffine}}

		p1.ScalarMultiplication(&g1GenAff, &b1)
		p2.ScalarMultiplication(&g2GenAff, &b2)

		r, _ = Pair([]G1Affine{g1GenAff}, []G2Affine{g2GenAff})
		r1, _ = Pair([]G1Affine{p1}, []G2Affine{g2GenAff})
		r2, _ = Pair([]G1Affine{g1GenAff}, []G2Affine{p2})

		r1r2.Exp(&r, b1b2)
		r1.Exp(&r1, b2)
		r2.Exp(&r2, b1)

		if !(r1r2.Equal(&r1) && r1r2.Equal(&r2) && !r.Equal(&zero)) {
			panic("pairing bilinearity check failed")
		}
	}




	return fuzzNormal
}